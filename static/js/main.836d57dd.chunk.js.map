{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","plugins","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","scales","xAxes","type","time","format","tooltipFormat","yAxes","gridLines","buildChartData","data","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","numeral","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","MapContainer","TileLayer","url","attribution","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","value","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.836d57dd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log('title and active');\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n      \n    >\n      <CardContent>\n       {/* Titlle coronaviruscases */}\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n          {/* 120k number of cases */}\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n  {/* total number */}\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n// import numeral from \"numeral\";\n\nconst options = {\n  plugins:{\n    legend: {\n      display: false,\n    }\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,// date \n        y: data[casesType][date] - lastDataPoint, \n      };\n      //pure maths concept\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  // api call \n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")// last 120 days\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log('Chart data');\n          console.log(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n// Circle\n\n// color create\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\n//changing value data into ascending order \nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n    // Lat lon calculate circle \n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n        /*\n        It will create proper circle as per caese \n         Math.sqrt (Explaination)\n        https://www.w3schools.com/jsref/jsref_sqrt.asp\n        */\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }} //We can use color aswell \n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";  \nimport numeral from \"numeral\"; // A javascript library for formatting and manipulating numbers.\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\"; //important\n/*\nRequired Pakage \n1 npm i numeral \n2 npm i react-chartjs-2 chart.js \n3 npm install @material-ui/core\n4 npm install @material-ui/icons\n5 npm i react-leaflet\n6 npm i bootstrap\n\nshortcut \nnpm i numeral react-chartjs-2 chart.js @material-ui/core @material-ui/icons react-leaflet bootstrap  \nsorted\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n*/\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");  //input country \n  const [countryInfo, setCountryInfo] = useState({});  //country info\n  const [countries, setCountries] = useState([]);  //country wise\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 }); //Map\n  // { lat: 34.80746, lng: -40.4796 } US \n  const [mapZoom, setMapZoom] = useState(3);\n\n  // Getting all country data \n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n      // Getting data by country name \n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //Country name\n            value: country.countryInfo.iso2,\n          }));\n          //  (sortData) ./util \n          let sortedData = sortData(data);\n          setCountries(countries); //All world wide data \n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\" \n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n        {/* ----------Left Frame------------------ */}\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n            // want a select item\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}> {country.name} </MenuItem> //This will show all country name \n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}  //case type is equal active\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n            // 0.0a converting value into K m  1m 25.0k\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n          {/* ---------------Right Frame------------------ */}\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            {/* now we are converting data into ascending order */}\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}