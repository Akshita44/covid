{"ast":null,"code":"import _regeneratorRuntime from \"D:/React_JS/Practice/covid/copractice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/React_JS/Practice/covid/copractice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/React_JS/Practice/covid/copractice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\React_JS\\\\Practice\\\\covid\\\\copractice\\\\src\\\\App.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\"; // A javascript library for formatting and manipulating numbers.\n\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\"; //important\n\n/*\nRequired Pakage \n1 npm i numeral \n2 npm i react-chartjs-2 chart.js \n3 npm install @material-ui/core\n4 npm install @material-ui/icons\n5 npm i react-leaflet\n6 npm i bootstrap\n\nshortcut \nnpm i numeral react-chartjs-2 chart.js @material-ui/core @material-ui/icons react-leaflet bootstrap  \nsorted\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar App = function App() {\n  _s();\n\n  var _useState = useState(\"worldwide\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      country = _useState2[0],\n      setInputCountry = _useState2[1]; //input country \n\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countryInfo = _useState4[0],\n      setCountryInfo = _useState4[1]; //country info\n\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      countries = _useState6[0],\n      setCountries = _useState6[1]; //country wise\n\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      mapCountries = _useState8[0],\n      setMapCountries = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tableData = _useState10[0],\n      setTableData = _useState10[1];\n\n  var _useState11 = useState(\"cases\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      casesType = _useState12[0],\n      setCasesType = _useState12[1];\n\n  var _useState13 = useState({\n    lat: 34.80746,\n    lng: -40.4796\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      mapCenter = _useState14[0],\n      setMapCenter = _useState14[1]; //Map\n  // { lat: 34.80746, lng: -40.4796 } US \n\n\n  var _useState15 = useState(3),\n      _useState16 = _slicedToArray(_useState15, 2),\n      mapZoom = _useState16[0],\n      setMapZoom = _useState16[1]; // Gettingn all country data \n\n\n  useEffect(function () {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      setCountryInfo(data);\n    });\n  }, []);\n  useEffect(function () {\n    // Gettingn data by country name \n    var getCountriesData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fetch(\"https://disease.sh/v3/covid-19/countries\").then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  var countries = data.map(function (country) {\n                    return {\n                      name: country.country,\n                      //Country name\n                      value: country.countryInfo.iso2\n                    };\n                  }); //  (sortData) ./util \n\n                  var sortedData = sortData(data);\n                  setCountries(countries); //All world wide data \n\n                  setMapCountries(data);\n                  setTableData(sortedData);\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getCountriesData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getCountriesData();\n  }, []);\n  console.log(casesType);\n\n  var onCountryChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var countryCode, url;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              countryCode = e.target.value;\n              url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : \"https://disease.sh/v3/covid-19/countries/\".concat(countryCode);\n              _context2.next = 4;\n              return fetch(url).then(function (response) {\n                return response.json();\n              }).then(function (data) {\n                setInputCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onCountryChange(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"COVID-19\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: \"app__dropdown\",\n          children: /*#__PURE__*/_jsxDEV(Select // want a select item\n          , {\n            variant: \"outlined\",\n            value: country,\n            onChange: onCountryChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"worldwide\",\n              children: \"Worldwide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, _this), countries.map(function (country) {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: country.value,\n                children: [\" \", country.name, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, _this) //This will show all country name \n              ;\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__stats\",\n        children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n          onClick: function onClick(e) {\n            return setCasesType(\"cases\");\n          },\n          title: \"Coronavirus Cases\",\n          isRed: true,\n          active: casesType === \"cases\" //case type is equal active\n          ,\n          cases: prettyPrintStat(countryInfo.todayCases),\n          total: numeral(countryInfo.cases).format(\"0.0a\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          onClick: function onClick(e) {\n            return setCasesType(\"recovered\");\n          },\n          title: \"Recovered\",\n          active: casesType === \"recovered\",\n          cases: prettyPrintStat(countryInfo.todayRecovered),\n          total: numeral(countryInfo.recovered).format(\"0.0a\") // 0.0a converting value into K m  1m 25.0k\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          onClick: function onClick(e) {\n            return setCasesType(\"deaths\");\n          },\n          title: \"Deaths\",\n          isRed: true,\n          active: casesType === \"deaths\",\n          cases: prettyPrintStat(countryInfo.todayDeaths),\n          total: numeral(countryInfo.deaths).format(\"0.0a\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Map, {\n        countries: mapCountries,\n        casesType: casesType,\n        center: mapCenter,\n        zoom: mapZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"app__right\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app__information\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Live Cases by Country\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Table, {\n            countries: tableData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Worldwide new \", casesType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(LineGraph, {\n            casesType: casesType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(App, \"sV9MZmZ2v8izFQm5OcFA8EuzDbI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/React_JS/Practice/covid/copractice/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","LineGraph","Table","sortData","prettyPrintStat","numeral","Map","App","country","setInputCountry","countryInfo","setCountryInfo","countries","setCountries","mapCountries","setMapCountries","tableData","setTableData","casesType","setCasesType","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","console","log","onCountryChange","e","countryCode","target","url","long","todayCases","cases","format","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";  \nimport numeral from \"numeral\"; // A javascript library for formatting and manipulating numbers.\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\"; //important\n/*\nRequired Pakage \n1 npm i numeral \n2 npm i react-chartjs-2 chart.js \n3 npm install @material-ui/core\n4 npm install @material-ui/icons\n5 npm i react-leaflet\n6 npm i bootstrap\n\nshortcut \nnpm i numeral react-chartjs-2 chart.js @material-ui/core @material-ui/icons react-leaflet bootstrap  \nsorted\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n*/\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");  //input country \n  const [countryInfo, setCountryInfo] = useState({});  //country info\n  const [countries, setCountries] = useState([]);  //country wise\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 }); //Map\n  // { lat: 34.80746, lng: -40.4796 } US \n  const [mapZoom, setMapZoom] = useState(3);\n\n  // Gettingn all country data \n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n      // Gettingn data by country name \n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //Country name\n            value: country.countryInfo.iso2,\n          }));\n          //  (sortData) ./util \n          let sortedData = sortData(data);\n          setCountries(countries); //All world wide data \n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\" \n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n        {/* ----------Left Frame------------------ */}\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n            // want a select item\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}> {country.name} </MenuItem> //This will show all country name \n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}  //case type is equal active\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n            // 0.0a converting value into K m  1m 25.0k\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n          {/* ---------------Right Frame------------------ */}\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            {/* now we are converting data into ascending order */}\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}