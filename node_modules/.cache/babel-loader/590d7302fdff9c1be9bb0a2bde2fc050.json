{"ast":null,"code":"import _regeneratorRuntime from \"D:/React_JS/Practice/covid/copractice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/React_JS/Practice/covid/copractice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/React_JS/Practice/covid/copractice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\React_JS\\\\Practice\\\\covid\\\\copractice\\\\src\\\\LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\"; // import numeral from \"numeral\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar options = {\n  plugins: {\n    legend: {\n      display: false\n    }\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      }\n    }]\n  }\n};\n\nvar buildChartData = function buildChartData(data, casesType) {\n  var chartData = [];\n  var lastDataPoint;\n\n  for (var date in data.cases) {\n    if (lastDataPoint) {\n      var newDataPoint = {\n        x: date,\n        // date \n        y: data[casesType][date] - lastDataPoint\n      }; //pure maths concept\n\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph(_ref) {\n  _s();\n\n  var casesType = _ref.casesType;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1]; // api call \n\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\") // last 120 days\n                .then(function (response) {\n                  return response.json();\n                }).then(function (data) {\n                  var chartData = buildChartData(data, casesType);\n                  setData(chartData);\n                  console.log('Chart data');\n                  console.log(chartData);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n          borderColor: \"#CC1034\",\n          data: data\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["D:/React_JS/Practice/covid/copractice/src/LineGraph.js"],"names":["React","useState","useEffect","Line","options","plugins","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","scales","xAxes","type","time","format","tooltipFormat","yAxes","gridLines","buildChartData","data","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","setData","fetchData","fetch","then","response","json","console","log","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n// import numeral from \"numeral\";\n\nconst options = {\n  plugins:{\n    legend: {\n      display: false,\n    }\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,// date \n        y: data[casesType][date] - lastDataPoint, \n      };\n      //pure maths concept\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  // api call \n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")// last 120 days\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log('Chart data');\n          console.log(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}